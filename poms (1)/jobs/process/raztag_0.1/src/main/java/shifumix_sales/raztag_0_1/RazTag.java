// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package shifumix_sales.raztag_0_1;

import routines.Numeric;
import routines.xmlToJson;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: RazTag Purpose: Integration d'utilisateur dans Shifumix<br>
 * Description: <br>
 * 
 * @author
 * @version 7.2.1.20190620_1446
 * @status
 */
public class RazTag implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "RazTag";
	private final String projectName = "SHIFUMIX_SALES";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					RazTag.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(RazTag.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tXMLMap_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tXMLMap_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTClient_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tXMLMap_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tXMLMap_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLMap_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_SHIFUMIX_SALES_RazTag = new byte[0];
		static byte[] commonByteArray_SHIFUMIX_SALES_RazTag = new byte[0];

		public Integer errorCode;

		public Integer getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SHIFUMIX_SALES_RazTag.length) {
					if (length < 1024 && commonByteArray_SHIFUMIX_SALES_RazTag.length == 0) {
						commonByteArray_SHIFUMIX_SALES_RazTag = new byte[1024];
					} else {
						commonByteArray_SHIFUMIX_SALES_RazTag = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SHIFUMIX_SALES_RazTag, 0, length);
				strReturn = new String(commonByteArray_SHIFUMIX_SALES_RazTag, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SHIFUMIX_SALES_RazTag) {

				try {

					int length = 0;

					this.errorCode = readInteger(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorCode=" + String.valueOf(errorCode));
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class outStruct implements routines.system.IPersistableRow<outStruct> {
		final static byte[] commonByteArrayLock_SHIFUMIX_SALES_RazTag = new byte[0];
		static byte[] commonByteArray_SHIFUMIX_SALES_RazTag = new byte[0];

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SHIFUMIX_SALES_RazTag) {

				try {

					int length = 0;

					this.body = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.body);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + String.valueOf(body));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(outStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tXMLMap_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tXMLMap_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				outStruct out = new outStruct();
				row3Struct row3 = new row3Struct();

				/**
				 * [tLogRow_3 begin ] start
				 */

				ok_Hash.put("tLogRow_3", false);
				start_Hash.put("tLogRow_3", System.currentTimeMillis());

				currentComponent = "tLogRow_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("row3" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tLogRow_3 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_3 = "|";
				java.io.PrintStream consoleOut_tLogRow_3 = null;

				StringBuilder strBuffer_tLogRow_3 = null;
				int nb_line_tLogRow_3 = 0;
///////////////////////    			

				/**
				 * [tLogRow_3 begin ] stop
				 */

				/**
				 * [tRESTClient_2 begin ] start
				 */

				ok_Hash.put("tRESTClient_2", false);
				start_Hash.put("tRESTClient_2", System.currentTimeMillis());

				currentComponent = "tRESTClient_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("out" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tRESTClient_2 = 0;

				/**
				 * [tRESTClient_2 begin ] stop
				 */

				/**
				 * [tXMLMap_2 begin ] start
				 */

				ok_Hash.put("tXMLMap_2", false);
				start_Hash.put("tXMLMap_2", System.currentTimeMillis());

				currentComponent = "tXMLMap_2";

				int tos_count_tXMLMap_2 = 0;

//===============================input xml init part===============================
				class XML_API_tXMLMap_2 {
					public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node).attribute("nil");
							if (attri != null && ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}
				class Var__tXMLMap_2__Struct {
				}
				Var__tXMLMap_2__Struct Var__tXMLMap_2 = new Var__tXMLMap_2__Struct();
// ###############################
// # Outputs initialization
				outStruct out_tmp = new outStruct();
				outStruct out_save = null;
// ###############################

				XML_API_tXMLMap_2 xml_api_tXMLMap_2 = new XML_API_tXMLMap_2();

				/**
				 * [tXMLMap_2 begin ] stop
				 */

				/**
				 * [tXMLMap_2 main ] start
				 */

				currentComponent = "tXMLMap_2";

				boolean rejectedInnerJoin_tXMLMap_2 = false;
				boolean rejectedDocInnerJoin_tXMLMap_2 = false;
				boolean mainRowRejected_tXMLMap_2 = false;
				boolean isMatchDocRowtXMLMap_2 = false;

				{ // start of Var scope

					// ###############################
					// # Vars tables

					Var__tXMLMap_2__Struct Var = Var__tXMLMap_2;
					// ###############################
					// # Output tables

					out = null;

// # Output table : 'out'
					out = out_tmp;
// ###############################

				} // end of Var scope

				rejectedInnerJoin_tXMLMap_2 = false;

				tos_count_tXMLMap_2++;

				/**
				 * [tXMLMap_2 main ] stop
				 */

				/**
				 * [tXMLMap_2 process_data_begin ] start
				 */

				currentComponent = "tXMLMap_2";

				/**
				 * [tXMLMap_2 process_data_begin ] stop
				 */
// Start of branch "out"
				if (out != null) {

					/**
					 * [tRESTClient_2 main ] start
					 */

					currentComponent = "tRESTClient_2";

					// out
					// out

					if (execStat) {
						runStat.updateStatOnConnection("out" + iterateId, 1, 1);
					}

					row3 = null;

// expected response body
					javax.ws.rs.core.Response responseDoc_tRESTClient_2 = null;

					try {
						// request body
						org.dom4j.Document requestDoc_tRESTClient_2 = null;
						String requestString_tRESTClient_2 = null;
						if (null != out.body) {
							requestDoc_tRESTClient_2 = out.body.getDocument();
						}

						Object requestBody_tRESTClient_2 = requestDoc_tRESTClient_2 != null ? requestDoc_tRESTClient_2
								: requestString_tRESTClient_2;

						// resposne class name
						Class<?> responseClass_tRESTClient_2 = org.dom4j.Document.class;

						// create web client instance
						org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean factoryBean_tRESTClient_2 = new org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean();

						boolean inOSGi = routines.system.BundleUtils.inOSGi();

						final java.util.List<org.apache.cxf.feature.Feature> features_tRESTClient_2 = new java.util.ArrayList<org.apache.cxf.feature.Feature>();

						String url = "http://192.168.0.33/";
						// {baseUri}tRESTClient
						factoryBean_tRESTClient_2.setServiceName(new javax.xml.namespace.QName(url, "tRESTClient"));
						factoryBean_tRESTClient_2.setAddress(url);

						features_tRESTClient_2.add(new org.apache.cxf.feature.LoggingFeature());

						factoryBean_tRESTClient_2.setFeatures(features_tRESTClient_2);

						java.util.List<Object> providers_tRESTClient_2 = new java.util.ArrayList<Object>();
						providers_tRESTClient_2.add(new org.apache.cxf.jaxrs.provider.dom4j.DOM4JProvider() {
							// workaround for https://jira.talendforge.org/browse/TESB-7276
							public org.dom4j.Document readFrom(Class<org.dom4j.Document> cls,
									java.lang.reflect.Type type, java.lang.annotation.Annotation[] anns,
									javax.ws.rs.core.MediaType mt,
									javax.ws.rs.core.MultivaluedMap<String, String> headers, java.io.InputStream is)
									throws IOException, javax.ws.rs.WebApplicationException {
								String contentLength = headers.getFirst("Content-Length");
								if (!org.apache.cxf.common.util.StringUtils.isEmpty(contentLength)
										&& Integer.valueOf(contentLength) <= 0) {
									try {
										return org.dom4j.DocumentHelper.parseText("<root/>");
									} catch (org.dom4j.DocumentException e_tRESTClient_2) {
										e_tRESTClient_2.printStackTrace();
									}
									return null;
								}
								return super.readFrom(cls, type, anns, mt, headers, is);
							}
						});
						org.apache.cxf.jaxrs.provider.json.JSONProvider jsonProvider_tRESTClient_2 = new org.apache.cxf.jaxrs.provider.json.JSONProvider();
						jsonProvider_tRESTClient_2.setIgnoreNamespaces(true);
						jsonProvider_tRESTClient_2.setAttributesToElements(true);

						jsonProvider_tRESTClient_2.setSupportUnwrapped(true);
						jsonProvider_tRESTClient_2.setWrapperName("root");

						jsonProvider_tRESTClient_2.setDropRootElement(false);
						jsonProvider_tRESTClient_2.setConvertTypesToStrings(false);
						providers_tRESTClient_2.add(jsonProvider_tRESTClient_2);
						factoryBean_tRESTClient_2.setProviders(providers_tRESTClient_2);
						factoryBean_tRESTClient_2.setTransportId("http://cxf.apache.org/transports/http");

						boolean use_auth_tRESTClient_2 = false;
						if (use_auth_tRESTClient_2 && "SAML".equals("OAUTH2_BEARER")) {
							if (!inOSGi) {
								throw new IllegalArgumentException(
										"SAML based security scenarios are not supported in Studio (standalone)");
							}
							// set SAML Token authentication

							final String decryptedPassword_tRESTClient_2 = routines.system.PasswordEncryptUtil
									.decryptPassword("ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

							org.apache.cxf.ws.security.trust.STSClient stsClient = org.talend.esb.security.saml.STSClientUtils
									.createSTSClient(factoryBean_tRESTClient_2.getBus(), "username",
											decryptedPassword_tRESTClient_2);

							org.talend.esb.security.saml.SAMLRESTUtils.configureClient(factoryBean_tRESTClient_2,
									stsClient);
						}

						org.apache.cxf.jaxrs.client.WebClient webClient_tRESTClient_2 = factoryBean_tRESTClient_2
								.createWebClient();

						// set request path
						webClient_tRESTClient_2.path("dolibarr/api/index.php/projects");

						// set connection properties
						org.apache.cxf.jaxrs.client.ClientConfiguration clientConfig_tRESTClient_2 = org.apache.cxf.jaxrs.client.WebClient
								.getConfig(webClient_tRESTClient_2);
						org.apache.cxf.transport.http.HTTPConduit conduit_tRESTClient_2 = clientConfig_tRESTClient_2
								.getHttpConduit();

						if (clientConfig_tRESTClient_2.getEndpoint() != null
								&& clientConfig_tRESTClient_2.getEndpoint().getEndpointInfo() != null) {
							clientConfig_tRESTClient_2.getEndpoint().getEndpointInfo()
									.setProperty("enable.webclient.operation.reporting", false);
						}

						org.apache.cxf.configuration.jsse.TLSClientParameters tlsClientParameters_tRESTClient_2 = new org.apache.cxf.configuration.jsse.TLSClientParameters();
						tlsClientParameters_tRESTClient_2.setDisableCNCheck(true);
						conduit_tRESTClient_2.setTlsClientParameters(tlsClientParameters_tRESTClient_2);

						if (use_auth_tRESTClient_2 && "BASIC".equals("OAUTH2_BEARER")) {
							// set BASIC auth

							final String decryptedPassword_tRESTClient_2 = routines.system.PasswordEncryptUtil
									.decryptPassword("ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

							org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_2 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
							authPolicy_tRESTClient_2.setAuthorizationType("Basic");
							authPolicy_tRESTClient_2.setUserName("username");
							authPolicy_tRESTClient_2.setPassword(decryptedPassword_tRESTClient_2);
							conduit_tRESTClient_2.setAuthorization(authPolicy_tRESTClient_2);
						} else if (use_auth_tRESTClient_2 && "HTTP Digest".equals("OAUTH2_BEARER")) {
							// set Digest auth

							final String decryptedPassword_tRESTClient_2 = routines.system.PasswordEncryptUtil
									.decryptPassword("ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

							org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_2 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
							authPolicy_tRESTClient_2.setAuthorizationType("Digest");
							authPolicy_tRESTClient_2.setUserName("username");
							authPolicy_tRESTClient_2.setPassword(decryptedPassword_tRESTClient_2);
							conduit_tRESTClient_2.setAuthorization(authPolicy_tRESTClient_2);
						}

						if (!inOSGi) {
							conduit_tRESTClient_2.getClient().setReceiveTimeout((long) (60 * 1000L));
							conduit_tRESTClient_2.getClient().setConnectionTimeout((long) (30 * 1000L));
							boolean use_proxy_tRESTClient_2 = false;
							if (use_proxy_tRESTClient_2) {

								final String decryptedPassword_tRESTClient_2 = routines.system.PasswordEncryptUtil
										.decryptPassword("ENC:[3wsOMnbk/woqdy5ZsU6GMg==]");

								conduit_tRESTClient_2.getClient().setProxyServer("61.163.92.4");
								conduit_tRESTClient_2.getClient().setProxyServerPort(Integer.valueOf(8080));
								conduit_tRESTClient_2.getProxyAuthorization().setUserName("");
								conduit_tRESTClient_2.getProxyAuthorization()
										.setPassword(decryptedPassword_tRESTClient_2);
							}
						}

						// set Accept-Type
						webClient_tRESTClient_2.accept("application/xml");

						// set optional query and header properties if any

						webClient_tRESTClient_2.header("DOLAPIKEY", "j4r06PiJhT9j320d9ZVR5FZf2OcfOwXf");

						if (use_auth_tRESTClient_2 && "OAUTH2_BEARER".equals("OAUTH2_BEARER")) {
							// set oAuth2 bearer token
							webClient_tRESTClient_2.header("Authorization",
									"Bearer " + "DOLAPIKEY: j4r06PiJhT9j320d9ZVR5FZf2OcfOwXf");
						}

						if (use_auth_tRESTClient_2 && "OIDC_PASSWORD_GRANT".equals("OAUTH2_BEARER")) {

							final String decryptedPassword_tRESTClient_2 = routines.system.PasswordEncryptUtil
									.decryptPassword("ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");

							String username_tRESTClient_2 = "username";
							String password_tRESTClient_2 = decryptedPassword_tRESTClient_2;

							String bearerHeader_tRESTClient_2 = null;

							try {
								if (!inOSGi) {
									org.springframework.context.support.ClassPathXmlApplicationContext context_tRESTClient_2 = new org.springframework.context.support.ClassPathXmlApplicationContext(
											"META-INF/tesb/oidc-context.xml");
									org.talend.esb.security.oidc.OidcConfiguration oidcConfiguration_tRESTClient_2 = context_tRESTClient_2
											.getBean(org.talend.esb.security.oidc.OidcConfiguration.class);
									bearerHeader_tRESTClient_2 = org.talend.esb.security.oidc.OidcClientUtils
											.oidcClientBearer(username_tRESTClient_2, password_tRESTClient_2,
													oidcConfiguration_tRESTClient_2);
								} else {
									bearerHeader_tRESTClient_2 = org.talend.esb.security.oidc.OidcClientUtils
											.oidcClientBearer(username_tRESTClient_2, password_tRESTClient_2);
								}
							} catch (Exception ex) {
								throw new javax.ws.rs.WebApplicationException("Failed to get OIDC access token: ", ex);
							}

							webClient_tRESTClient_2.header("Authorization", bearerHeader_tRESTClient_2);
						}

						// if FORM request then capture query parameters into Form, otherwise set them
						// as queries

						try {
							// start send request

							responseDoc_tRESTClient_2 = webClient_tRESTClient_2.invoke("DELETE",
									requestBody_tRESTClient_2);

							int webClientResponseStatus_tRESTClient_2 = webClient_tRESTClient_2.getResponse()
									.getStatus();
							if (webClientResponseStatus_tRESTClient_2 >= 300) {
								throw new javax.ws.rs.WebApplicationException(webClient_tRESTClient_2.getResponse());
							}

						} catch (javax.ws.rs.WebApplicationException ex_tRESTClient_2) {

							if (row3 == null) {
								row3 = new row3Struct();
							}
							row3.errorCode = ex_tRESTClient_2.getResponse().getStatus();

							String errorMessage_tRESTClient_2 = null;
							try {
								errorMessage_tRESTClient_2 = ex_tRESTClient_2.getResponse().readEntity(String.class);
							} catch (Exception exe_tRESTClient_2) {
								// ignore
							}
							if (null == errorMessage_tRESTClient_2 || 0 == errorMessage_tRESTClient_2.trim().length()) {
								errorMessage_tRESTClient_2 = ex_tRESTClient_2.getMessage();
							}
							row3.errorMessage = errorMessage_tRESTClient_2;

							globalMap.put("tRESTClient_2_HEADERS", ex_tRESTClient_2.getResponse().getHeaders());

						}

					} catch (Exception e_tRESTClient_2) {

						throw new TalendException(e_tRESTClient_2, currentComponent, globalMap);

					}

					tos_count_tRESTClient_2++;

					/**
					 * [tRESTClient_2 main ] stop
					 */

					/**
					 * [tRESTClient_2 process_data_begin ] start
					 */

					currentComponent = "tRESTClient_2";

					/**
					 * [tRESTClient_2 process_data_begin ] stop
					 */
// Start of branch "row3"
					if (row3 != null) {

						/**
						 * [tLogRow_3 main ] start
						 */

						currentComponent = "tLogRow_3";

						// row3
						// row3

						if (execStat) {
							runStat.updateStatOnConnection("row3" + iterateId, 1, 1);
						}

///////////////////////		

						strBuffer_tLogRow_3 = new StringBuilder();

						if (row3.errorCode != null) { //

							strBuffer_tLogRow_3.append(String.valueOf(row3.errorCode));

						} //

						strBuffer_tLogRow_3.append("|");

						if (row3.errorMessage != null) { //

							strBuffer_tLogRow_3.append(String.valueOf(row3.errorMessage));

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_3 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_3);
						}
						consoleOut_tLogRow_3.println(strBuffer_tLogRow_3.toString());
						consoleOut_tLogRow_3.flush();
						nb_line_tLogRow_3++;
//////

//////                    

///////////////////////    			

						tos_count_tLogRow_3++;

						/**
						 * [tLogRow_3 main ] stop
						 */

						/**
						 * [tLogRow_3 process_data_begin ] start
						 */

						currentComponent = "tLogRow_3";

						/**
						 * [tLogRow_3 process_data_begin ] stop
						 */

						/**
						 * [tLogRow_3 process_data_end ] start
						 */

						currentComponent = "tLogRow_3";

						/**
						 * [tLogRow_3 process_data_end ] stop
						 */

					} // End of branch "row3"

					/**
					 * [tRESTClient_2 process_data_end ] start
					 */

					currentComponent = "tRESTClient_2";

					/**
					 * [tRESTClient_2 process_data_end ] stop
					 */

				} // End of branch "out"

				/**
				 * [tXMLMap_2 process_data_end ] start
				 */

				currentComponent = "tXMLMap_2";

				/**
				 * [tXMLMap_2 process_data_end ] stop
				 */

				/**
				 * [tXMLMap_2 end ] start
				 */

				currentComponent = "tXMLMap_2";

				ok_Hash.put("tXMLMap_2", true);
				end_Hash.put("tXMLMap_2", System.currentTimeMillis());

				/**
				 * [tXMLMap_2 end ] stop
				 */

				/**
				 * [tRESTClient_2 end ] start
				 */

				currentComponent = "tRESTClient_2";

				if (globalMap.get("tRESTClient_2_NB_LINE") == null) {
					globalMap.put("tRESTClient_2_NB_LINE", 1);
				}

// [tRESTCliend_end]

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("out" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tRESTClient_2", true);
				end_Hash.put("tRESTClient_2", System.currentTimeMillis());

				/**
				 * [tRESTClient_2 end ] stop
				 */

				/**
				 * [tLogRow_3 end ] start
				 */

				currentComponent = "tLogRow_3";

//////
//////
				globalMap.put("tLogRow_3_NB_LINE", nb_line_tLogRow_3);

///////////////////////    			

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tLogRow_3", true);
				end_Hash.put("tLogRow_3", System.currentTimeMillis());

				/**
				 * [tLogRow_3 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tXMLMap_2 finally ] start
				 */

				currentComponent = "tXMLMap_2";

				/**
				 * [tXMLMap_2 finally ] stop
				 */

				/**
				 * [tRESTClient_2 finally ] start
				 */

				currentComponent = "tRESTClient_2";

				/**
				 * [tRESTClient_2 finally ] stop
				 */

				/**
				 * [tLogRow_3 finally ] start
				 */

				currentComponent = "tLogRow_3";

				/**
				 * [tLogRow_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tXMLMap_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final RazTag RazTagClass = new RazTag();

		int exitCode = RazTagClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = RazTag.class.getClassLoader()
					.getResourceAsStream("shifumix_sales/raztag_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = RazTag.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : RazTag");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring=")) {// for trunjob call
			enableLogStash = "true".equalsIgnoreCase(arg.substring(13));
		}

		if (!enableLogStash) {
			enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 49058 characters generated by Talend Open Studio for Data Integration on the
 * 22 juillet 2019 à 10:31:09 CEST
 ************************************************************************************************/